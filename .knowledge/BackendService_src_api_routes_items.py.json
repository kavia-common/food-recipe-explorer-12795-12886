{"is_source_file": true, "format": "Python", "description": "This file defines API route handlers for managing food items, including creation, retrieval, updating, and deletion, using FastAPI framework. It depends on services, schemas, and authentication/authorization dependencies.", "external_files": ["../schemas/food", "../repositories/memory_repo", "../services/items_service", "../core/dependencies", "../core/security"], "external_methods": ["Depends", "APIRouter", "HTTPException", "ensure_admin", "get_pagination", "get_sorting", "get_required_user", "get_optional_user"], "published": ["router", "create_food_item", "list_food_items", "get_food_item", "update_food_item", "delete_food_item"], "classes": [], "methods": [{"name": "ItemsService get_service(repo: InMemoryRepository = Depends(lambda: InMemoryRepository()))", "description": "Dependency factory that provides an ItemsService instance, injecting a new InMemoryRepository.", "scope": "", "scopeKind": ""}, {"name": "create_food_item( payload: FoodItemCreate, service: ItemsService = Depends(get_service), user: AuthUser = Depends(get_required_user), )", "description": "REST endpoint to create a new food item, requiring admin privileges.", "scope": "", "scopeKind": ""}, {"name": "List[FoodItemOut] list_food_items( query: FoodItemQuery = Depends(), pagination: dict = Depends(get_pagination), sorting: dict = Depends(get_sorting), service: ItemsService = Depends(get_service), _: AuthUser | None = Depends(get_optional_user), )", "description": "REST endpoint to list and filter food items with pagination and sorting, no authentication required.", "scope": "", "scopeKind": ""}, {"name": "get_food_item( item_id: str, service: ItemsService = Depends(get_service), _: AuthUser | None = Depends(get_optional_user), )", "description": "REST endpoint to retrieve details of a specific food item by ID, no authentication required.", "scope": "", "scopeKind": ""}, {"name": "update_food_item( item_id: str, payload: FoodItemUpdate, service: ItemsService = Depends(get_service), user: AuthUser = Depends(get_required_user), )", "description": "REST endpoint to update an existing food item, requiring admin privileges.", "scope": "", "scopeKind": ""}, {"name": "delete_food_item( item_id: str, service: ItemsService = Depends(get_service), user: AuthUser = Depends(get_required_user), )", "description": "REST endpoint to delete a food item, requiring admin privileges.", "scope": "", "scopeKind": ""}], "calls": ["ensure_admin(user)", "service.create_item(payload)", "service.query_items(...)", "PaginatedResponse(...).model_dump()", "service.get_item(item_id)", "service.update_item(item_id, payload)", "service.delete_item(item_id)"], "search-terms": ["FastAPI food item routes", "items API endpoints", "food item CRUD", "API dependency injection", "admin authorization"], "state": 2, "file_id": 15, "knowledge_revision": 32, "git_revision": "", "ctags": [{"_type": "tag", "name": "create_food_item", "path": "/home/kavia/workspace/code-generation/food-recipe-explorer-12795-12886/BackendService/src/api/routes/items.py", "pattern": "/^async def create_food_item($/", "language": "Python", "kind": "function", "signature": "( payload: FoodItemCreate, service: ItemsService = Depends(get_service), user: AuthUser = Depends(get_required_user), )"}, {"_type": "tag", "name": "delete_food_item", "path": "/home/kavia/workspace/code-generation/food-recipe-explorer-12795-12886/BackendService/src/api/routes/items.py", "pattern": "/^async def delete_food_item($/", "language": "Python", "kind": "function", "signature": "( item_id: str, service: ItemsService = Depends(get_service), user: AuthUser = Depends(get_required_user), )"}, {"_type": "tag", "name": "get_food_item", "path": "/home/kavia/workspace/code-generation/food-recipe-explorer-12795-12886/BackendService/src/api/routes/items.py", "pattern": "/^async def get_food_item($/", "language": "Python", "kind": "function", "signature": "( item_id: str, service: ItemsService = Depends(get_service), _: AuthUser | None = Depends(get_optional_user), )"}, {"_type": "tag", "name": "get_service", "path": "/home/kavia/workspace/code-generation/food-recipe-explorer-12795-12886/BackendService/src/api/routes/items.py", "pattern": "/^def get_service(repo: InMemoryRepository = Depends(lambda: InMemoryRepository())) -> ItemsServic/", "language": "Python", "typeref": "typename:ItemsService", "kind": "function", "signature": "(repo: InMemoryRepository = Depends(lambda: InMemoryRepository()))"}, {"_type": "tag", "name": "list_food_items", "path": "/home/kavia/workspace/code-generation/food-recipe-explorer-12795-12886/BackendService/src/api/routes/items.py", "pattern": "/^async def list_food_items($/", "language": "Python", "typeref": "typename:List[FoodItemOut]", "kind": "function", "signature": "( query: FoodItemQuery = Depends(), pagination: dict = Depends(get_pagination), sorting: dict = Depends(get_sorting), service: ItemsService = Depends(get_service), _: AuthUser | None = Depends(get_optional_user), )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/food-recipe-explorer-12795-12886/BackendService/src/api/routes/items.py", "pattern": "/^router = APIRouter()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_food_item", "path": "/home/kavia/workspace/code-generation/food-recipe-explorer-12795-12886/BackendService/src/api/routes/items.py", "pattern": "/^async def update_food_item($/", "language": "Python", "kind": "function", "signature": "( item_id: str, payload: FoodItemUpdate, service: ItemsService = Depends(get_service), user: AuthUser = Depends(get_required_user), )"}], "hash": "6e63ee1d521a2ff26bb76c7af9f3578e", "format-version": 4, "code-base-name": "BackendService", "filename": "BackendService/src/api/routes/items.py", "fields": [{"name": "router = APIRouter()", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"32": ""}]}